package com.resumeenhancer.service;

import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;
import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.util.ast.Node;
import com.vladsch.flexmark.util.data.MutableDataSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@Service
public class ExportService {

    @Autowired
    private StorageService storageService;

    private final Parser parser;
    private final HtmlRenderer renderer;

    public ExportService() {
        MutableDataSet options = new MutableDataSet();
        this.parser = Parser.builder(options).build();
        this.renderer = HtmlRenderer.builder(options).build();
    }

    public String exportToMarkdown(String enhancedText, String title) {
        StringBuilder markdown = new StringBuilder();
        
        // Add metadata
        markdown.append("---\n");
        markdown.append("title: ").append(title != null ? title : "Resume").append("\n");
        markdown.append("generated: ").append(LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)).append("\n");
        markdown.append("generator: Resume Enhancer\n");
        markdown.append("---\n\n");
        
        // Add content
        markdown.append(enhancedText);
        
        return markdown.toString();
    }

    public String exportToPdfUrl(String enhancedText, String filename) throws IOException {
        byte[] pdfBytes = exportToPdfBytes(enhancedText);
        return uploadPdfToStorage(pdfBytes, filename + ".pdf");
    }

    public byte[] exportToPdfBytes(String enhancedText) throws IOException {
        // Convert Markdown to HTML
        Node document = parser.parse(enhancedText);
        String html = renderer.render(document);
        
        // Create full HTML document with styling
        String fullHtml = createStyledHtml(html);
        
        // Convert HTML to PDF
        return convertHtmlToPdf(fullHtml);
    }

    public String convertMarkdownToHtml(String markdownText) {
        // Convert Markdown to HTML
        Node document = parser.parse(markdownText);
        String html = renderer.render(document);
        
        // Create full HTML document with styling
        return createStyledHtml(html);
    }

    private String createStyledHtml(String content) {
        return "<!DOCTYPE html>" +
                "<html lang=\"en\">" +
                "<head>" +
                "<meta charset=\"UTF-8\">" +
                "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" +
                "<title>Resume</title>" +
                "<style>" +
                "body { font-family: 'Arial', sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }" +
                "h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }" +
                "h2 { color: #34495e; margin-top: 30px; border-left: 4px solid #3498db; padding-left: 15px; }" +
                "h3 { color: #5d6d7e; margin-top: 20px; }" +
                "p { margin-bottom: 12px; }" +
                "ul { margin-bottom: 15px; }" +
                "li { margin-bottom: 8px; }" +
                ".footer { margin-top: 40px; text-align: center; font-size: 0.9em; color: #666; border-top: 1px solid #eee; padding-top: 15px; }" +
                "</style>" +
                "</head>" +
                "<body>" +
                content +
                "<div class=\"footer\">" +
                "<p><em>Generated by Resume Enhancer - " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("MMMM dd, yyyy")) + "</em></p>" +
                "</div>" +
                "</body>" +
                "</html>";
    }

    private byte[] convertHtmlToPdf(String html) throws IOException {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            PdfRendererBuilder builder = new PdfRendererBuilder();
            builder.withHtmlContent(html, "");
            builder.toStream(outputStream);
            builder.useFastMode();
            builder.run();
            
            return outputStream.toByteArray();
        }
    }

    private String uploadPdfToStorage(byte[] pdfBytes, String fileName) throws IOException {
        String storedPath = storageService.uploadBytes(pdfBytes, fileName, "exports");
        return storageService.getFileUrl(storedPath);
    }

    public String generateUniqueFilename(String prefix, Long userId) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        return String.format("%s_%d_%s", prefix, userId, timestamp);
    }

    public String createVersionComparisonHtml(String originalText, String enhancedText, 
                                            String originalTitle, String enhancedTitle) {
        StringBuilder html = new StringBuilder();
        html.append("<div class='version-comparison'>");
        html.append("<div class='comparison-header'>");
        html.append("<h2>Version Comparison</h2>");
        html.append("</div>");
        
        html.append("<div class='comparison-content' style='display: flex; gap: 20px;'>");
        
        // Original version
        html.append("<div class='version-column' style='flex: 1; border-right: 1px solid #ddd; padding-right: 20px;'>");
        html.append("<h3>").append(originalTitle != null ? originalTitle : "Original").append("</h3>");
        html.append("<div class='version-content'>");
        Node originalDoc = parser.parse(originalText);
        html.append(renderer.render(originalDoc));
        html.append("</div>");
        html.append("</div>");
        
        // Enhanced version
        html.append("<div class='version-column' style='flex: 1; padding-left: 20px;'>");
        html.append("<h3>").append(enhancedTitle != null ? enhancedTitle : "Enhanced").append("</h3>");
        html.append("<div class='version-content'>");
        Node enhancedDoc = parser.parse(enhancedText);
        html.append(renderer.render(enhancedDoc));
        html.append("</div>");
        html.append("</div>");
        
        html.append("</div>");
        html.append("</div>");
        
        return html.toString();
    }
}
